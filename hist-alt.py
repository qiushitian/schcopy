#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Feb 22 19:01:39 2023

IMPORTANT NOTICE
-----
Code here might be generated by ChatGPT
and might yet to be tested by human

@author: qtian
"""

# Target
TARGET = 'TOI-1201'

# Define the directory where the FITS files are located
FITS_PATH = r"D:\Images\Scheduler\Kyle McGregor"

# the file that contains the list of targets
TARGET_LIST_PATH = f'space_targets.txt'

# Define the path for the copied FITS files
COPY_PATH = r"D:\chris-tian\hist"

import os
import csv
from astropy.io import fits
from datetime import datetime

def is_target(target, observed_object):
    '''
    '''
    if all(word.casefold() in observed_object.casefold() for word in target.split()):
        return True

def is_target_from_file(file_path, observed_object):
    '''
    Check if the observed object is one of our targets.

    Parameters
    ----------
    file_path : str
        Dir of target list.
    observed_object : str
        Name of observed object.

    Returns
    -------
    bool
        DESCRIPTION.

    '''
    with open(file_path) as f:
        for line in f:
            words = line.strip().replace('-', ' ').replace('/', ' ').replace('_', ' ').split()
            if all(word.casefold() in observed_object.casefold() for word in words):
                return True
    return False

# Create an empty dictionary to store the information for each object
object_dict = {}

# Loop through all files in the directory
for root, dirs, files in os.walk(FITS_PATH):

    # check if the directory is a folder with target(s)
    if not is_target_from_file(TARGET_LIST_PATH, root.split('\\')[-1]):
        continue

    # visualize progress (target(s) only)
    print(root)

    for filename in files:
        # Check if it is target and if it is a FITS file
        if is_target_from_file(TARGET_LIST_PATH, filename) and filename.lower().endswith((".fit", ".fits", ".fts")):
            # Get the full path to the file
            file_path = os.path.join(root, filename)

            # Open the FITS file and read the header
            try:
                with fits.open(file_path) as hdul:
                    header = hdul[0].header
                    date_obs = header['DATE-OBS']
                    object_name = header['OBJECT']
                    jd = header['JD']
                    filt = header['FILTER']
                    airmass = header['AIRMASS']
                    altitude = header['OBJCTALT']
            except KeyError:
                print(f"{file_path} header missing necessary key(s): 'DATE-OBS', 'OBJECT', 'JD', 'FILTER', 'AIRMASS', 'OBJCTALT'.")
                continue

            # Store the information in a dictionary
            info_dict = {'object': object_name, 'date-obs': date_obs, 'jd': jd, 'filter': filt, 'airmass': airmass, 'altitude': altitude}

            # sanitize object_name
            name_split = object_name.replace(' ', '?').replace('-', '?').replace('_', '?').split('?')
            if name_split[0] == 'HD':
                object_name = 'HD ' + name_split[1]
            elif name_split[0] == 'TOI':
                object_name = 'TOI-' + name_split[1]

            # Append the dictionary to the list in the object_dict
            if object_name in object_dict:
                object_dict[object_name].append(info_dict)
            else:
                object_dict[object_name] = [info_dict]

# write a SINGLE CSV for ALL targets
# Define the path for the CSV file
csv_path = os.path.join(COPY_PATH, fr'space_hist_{datetime.now().strftime("%Y-%m-%d_%H-%M-%S")}.csv')

# Write the CSV file
with open(csv_path, mode='w+', newline='') as csv_file:
    fieldnames = ['object', 'date-obs', 'airmass', 'altitude', 'jd', 'filter']
    writer = csv.DictWriter(csv_file, fieldnames=fieldnames)

    # Write the header row
    writer.writeheader()

    # Loop through the keys in the object_dict and
    for object_name in object_dict:
        # loop around and write body row
        for row in object_dict[object_name]:
            writer.writerow(row)
